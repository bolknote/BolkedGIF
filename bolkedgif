#!/bin/sh
# http://bolknote.ru 2012 Evgeny Stepanischev

[ -r "$1" ] && [ -n "$2" ] && file -b "$1" | grep -Fq GIF
if [ $? -eq 1 ]; then
    echo Использование:
    echo '  '$0 исходный.gif сжатый.gif-gz
    exit 0
fi

# конфигурация
TEMP=temp

# есть у нас ImageMagic?
MAGICSPLIT=

which -s convert
if [ $? -eq 0 ]; then

    # проверим, пригоден ли он для конвертации
    gif='R0lGODdhCgAKAPMJAODg/x8f/z4+/1BQ/2Bg/5+f/6+v/8HB/////wAA/wAAAAAAAAAAAA
    AAAAAAAAAAACwAAAAACgAKAAAEMBBJcERIWCJqcdLchQHkYQxWEBysURCoIMsDURjsoQbCg
    JMAD+8A0AgFRCNmWJREAAA7'

    no=$(echo $gif | base64 -D | convert +compress - - | wc -c)
    yes=$(echo $gif | base64 -D | convert - - | wc -c)

    if [ $yes -eq $no ]; then
        MAGICSPLIT=yes

        which -s gifinter
        if [ $? -eq 1 ]; then
            echo Ошибка: не обнаружена утилита gifinter из библиотеки libungif
        fi
    else
        which -s gifsicle
        if [ $? -eq 1 ]; then
            echo Ошибка: не обнаружена утилита gifsicle
        fi
    fi
fi

# Создаём временный директорий, если он есть, просто очищаем
mkdir -p "$TEMP"
rm -f "$TEMP"/*

# Смотрим какой Пайтон у нас в наличии
which -s pypy
if [ $? -eq 1 ]; then
    which -s python

    if [ $? -eq 1 ]; then
        echo "Ошибка: для запуска нужен python или PyPy."
        exit 1
    fi
    PYTHON=python
else
    PYTHON=pypy
fi

# Запускаем сканирование структуры
"$PYTHON" gifreadstructure.py "$1" > "$TEMP"/structure.cfg &
echo Сканируем структуру

if [ -z "$MAGICSPLIT" ]; then
    echo Разбиваем на кадры утилитой gifsicle

    gifsicle -e -o "$TEMP"/frame "$1" 2>/dev/null &
    wait
else
    wait

    echo Разбиваем на кадры при помощи ImageMagic

    # сколько получилось кадров?
    FRAMES=$(grep -F 'block_id = 44' "$TEMP"/structure.cfg | wc -l)
    let 'FRAMES--'

    # пускаем конвертацию в фоне
    proc=0
    for n in `seq 0 $FRAMES`; do
        convert "${1}[${n}]" $(printf "%s/%s%03d" "$TEMP" frame. $n) &

        let 'proc++'

        if [ $proc -gt 5 ]; then
            wait
            proc=0
        fi
    done

    wait
fi

echo Получилось кадров: $(ls -1 "$TEMP"/frame.* | wc -l)
echo Перепаковка кадра утилитой gifinter

proc=0

for name in "$TEMP"/frame.*; do
    (
        gifinter "$name" |
        "$PYTHON" gifreadstructure.py --body=1 - > "$TEMP/${name##*.}.raw"
        rm -f "$name"
    ) &
    let 'proc++'

    if [ $proc -gt 5 ]; then
        wait
        proc=0
    fi
done

wait

echo Сборка и сжатие результата
"$PYTHON" gifwritestructure.py "$TEMP" | gzip -9ncf > "$2"
rm -rf "$TEMP"

echo Результат занимает $(ls -hl "$2" | awk '{print $5}'), исходный файл $(ls -hl "$1" | awk '{print $5}')

newsize=$(ls -l "$2" | awk '{print $5}')
origsize=$(ls -l "$1" | awk '{print $5}')

let 'diff=origsize-newsize'

case $diff in
    0  )
        echo Результат не изменился;;
    -* )
        echo Проигрыш: $diff байт;;
    *  )
        echo Выигрыш: $diff байт;;
esac


