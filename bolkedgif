#!/bin/sh
# http://bolknote.ru 2012 Evgeny Stepanischev

[ -r "$1" ] && [ -n "$2" ] && grep -q '^GIF8.a' "$1"
if [ $? -eq 1 ]; then
    echo "Usage:"
    echo "  $0 source.gif compressed.gif-gz"
    exit 0
fi

# Configuration
TEMP=temp

# Do we have ImageMagick?
MAGICSPLIT=

which -s magick
if [ $? -eq 0 ]; then
    MAGICSPLIT=yes

    which -s gifinter
    if [ $? -eq 1 ]; then
        echo "Error: the gifinter utility from libungif was not found."
    fi
else
    which -s gifsicle
    if [ $? -eq 1 ]; then
        echo "Error: the gifsicle utility was not found."
    fi
fi

# Create (or clean) the temporary directory
mkdir -p "$TEMP"
rm -f "$TEMP"/*

PYTHON=python3

# Is Python 3 available?
which -s "$PYTHON"
if [ $? -eq 1 ]; then
    echo "Error: python3 is required."
    exit 1
fi

# Scan GIF structure
"$PYTHON" gifreadstructure.py "$1" > "$TEMP/structure.cfg" &
echo "Scanning structure..."

if [ -z "$MAGICSPLIT" ]; then
    echo "Splitting into frames with gifsicle..."
    gifsicle -e -o "$TEMP/frame" "$1" 2>/dev/null &
    wait
else
    wait
    echo "Splitting into frames with ImageMagick..."

    # Count the frames
    FRAMES=$(grep -Fc 'block_id = 44' "$TEMP/structure.cfg")
    let 'FRAMES--'

    # Convert frames in the background
    proc=0
    for n in `seq 0 $FRAMES`; do
        magick "${1}[${n}]" $(printf "%s/%s%03d" "$TEMP" frame. $n) &

        let 'proc++'
        if [ $proc -gt 5 ]; then
            wait
            proc=0
        fi
    done
    wait
fi

echo Total frames: $(ls -1 "$TEMP"/frame.* | wc -l) "\n"
echo "Re-packing frames with gifinter..."

proc=0
for name in "$TEMP"/frame.*; do
    (
        gifinter "$name" |
        "$PYTHON" gifreadstructure.py --body - > "$TEMP/${name##*.}.raw"
        rm -f "$name"
    ) &
    let 'proc++'
    if [ $proc -gt 5 ]; then
        wait
        proc=0
    fi
done
wait

echo "Building and gzipping the final GIF..."
"$PYTHON" gifwritestructure.py "$TEMP" | gzip -9ncf > "$2"
rm -rf "$TEMP"

echo "Result size:   $(ls -hl "$2" | awk '{print $5}')"
echo "Original size: $(ls -hl "$1" | awk '{print $5}')"

newsize=$(ls -l "$2" | awk '{print $5}')
origsize=$(ls -l "$1" | awk '{print $5}')
let 'diff=origsize-newsize'

echo

case $diff in
    0)
        echo "No change in size.";;
    -*)
        let 'diff=-diff'
        echo "üëé  Larger by $diff bytes.";;
    *)
        echo "üëç  Smaller by $diff bytes.";;
esac
