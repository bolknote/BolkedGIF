#!/usr/bin/env python3

import argparse
import sys
from pathlib import Path
from typing import Optional

import configparser


def write_bin_from_hex(hex_str: str) -> None:
    """
    Convert a hexadecimal string to bytes and write them to stdout (binary).

    Args:
        hex_str: Continuous string of hexadecimal characters (e.g. ``"21FF0B"``).
    """
    sys.stdout.buffer.write(bytes.fromhex(hex_str))


def read_structure(structure_cfg: str, files_dir: str) -> None:
    """
    Re-assemble an uncompressed GIF from its parsed blocks.

    Args:
        structure_cfg: Path to ``structure.cfg`` generated by an external tool.
        files_dir: Directory containing ``*.raw`` image data files.
    """
    config = configparser.ConfigParser()
    config.read(structure_cfg, encoding="utf-8")

    pict: int = 0

    for section in config.sections():
        try:
            block_id: Optional[int] = config.getint(section, "block_id")
        except (configparser.NoOptionError, ValueError):
            block_id = None

        # 0x2C — Image Descriptor
        # 0x21 — Extension Introducer
        if block_id in (0x2C, 0x21, None):
            if block_id == 0x21:  # Extension
                ext_id: int = config.getint(section, "ext_id")

                # Only keep Graphics Control (0xF9) and Application (0xFF) extensions
                if ext_id not in (0xF9, 0xFF):
                    continue

                if ext_id == 0xFF:  # Application Extension — filter by identifier
                    application = (
                        config.get(section, "application_id")
                        + config.get(section, "application_id_code")
                    )
                    if application != "NETSCAPE2.0":
                        continue
        else:
            # Skip any other block types entirely
            continue

        write_bin_from_hex(config.get(section, "raw"))

        if block_id == 0x2C and config.getboolean(section, "has_lct", fallback=False):
            write_bin_from_hex(config.get(section, "colors"))
        elif block_id is None and config.getboolean(section, "has_gct", fallback=False):
            write_bin_from_hex(config.get(section, "colors"))

        if block_id == 0x2C:
            # *.raw files are expected to be named 000.raw, 001.raw, …
            raw_name = f"{pict:03d}.raw"
            pict += 1
            raw_path = Path(files_dir) / raw_name
            with raw_path.open("rb") as f:
                sys.stdout.buffer.write(f.read())


def main() -> None:
    parser = argparse.ArgumentParser(description="Write uncompressed GIF from parsed blocks")
    parser.add_argument("tempdir", metavar="tempdir", type=str, help="directory with structure.cfg and *.raw files")
    args = parser.parse_args()

    structure_cfg = Path(args.tempdir) / "structure.cfg"
    read_structure(str(structure_cfg), args.tempdir)


if __name__ == "__main__":
    main()
